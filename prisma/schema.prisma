generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type NotificationsData {
  friendId   String?
  roomId     String?
  uploaderId String?
  videoId    String?
}

model direct_messages {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileName    Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileSize    Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileType    Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileUrl     Json?
  isRead      Boolean
  messageType String
  receiverId  String   @db.ObjectId
  senderId    String   @db.ObjectId
  updatedAt   DateTime @db.Date
}

model friendships {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  friendId  String   @db.ObjectId
  status    String
  updatedAt DateTime @db.Date
  userId    String   @db.ObjectId

  @@unique([userId, friendId])
}

model messages {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model moderation_logs {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model notifications {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime          @db.Date
  data      NotificationsData
  isRead    Boolean
  message   String
  title     String
  type      String
  userId    String            @db.ObjectId
}

model payments {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  paystackRef Json?  @unique
}

model personal_livestreams {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @db.Date
  description String
  isLive      Boolean
  privacy     String
  startedAt   DateTime @db.Date
  streamerId  String   @db.ObjectId
  title       String
  updatedAt   DateTime @db.Date
  viewerCount BigInt

  // Relations
  streamer    users    @relation("PersonalLivestreams", fields: [streamerId], references: [id], onDelete: Cascade)

  @@map("personal_livestreams")
}

model room_members {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  isActive Boolean
  joinedAt DateTime @db.Date
  role     String
  roomId   String   @db.ObjectId
  userId   String   @db.ObjectId

  @@unique([userId, roomId])
  @@map("room_members")
}

model room_videos {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @db.Date
  description  String
  duration     BigInt
  isForwarded  Boolean?
  privacy      String
  roomId       String   @db.ObjectId
  thumbnailUrl String
  title        String
  updatedAt    DateTime @db.Date
  uploadedBy   String   @db.ObjectId
  videoUrl     String

  @@map("room_videos")
}

model rooms {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  allowFileSharing Boolean
  allowVideo       Boolean
  category         String
  createdAt        DateTime @db.Date
  description      String
  isActive         Boolean
  isPrivate        Boolean?
  lastActivity     DateTime @db.Date
  maxUsers         BigInt
  name             String
  ownerId          String   @db.ObjectId
  privacy          String
  requireApproval  Boolean
  roomId           String   @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  tags             Json?
  updatedAt        DateTime @db.Date

  @@map("rooms")
}

model users {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  coins        BigInt
  createdAt    DateTime @db.Date
  displayName  String
  email        String   @unique
  isOnline     Boolean
  lastSeen     DateTime @db.Date
  level        BigInt
  passwordHash String
  role         String
  updatedAt    DateTime @db.Date
  username     String   @unique
  vipLifetime  Boolean
  xp           BigInt

  // Relations
  personalLivestreams personal_livestreams[] @relation("PersonalLivestreams")

  @@map("users")
}
