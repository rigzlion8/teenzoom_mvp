generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type NotificationsData {
  friendId   String?
  roomId     String?
  uploaderId String?
  videoId    String?
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  friendId  String   @db.ObjectId
  status    String
  updatedAt DateTime @db.Date
  userId    String   @db.ObjectId

  // Relations
  user      User     @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendFriendships", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

model Message {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  userId      String      @db.ObjectId
  roomId      String      @db.ObjectId
  messageType String
  fileUrl     String?
  fileName    String?
  fileSize    BigInt?
  createdAt   DateTime    @db.Date
  updatedAt   DateTime    @db.Date

  // Relations
  user        User        @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  room        Room        @relation("RoomMessages", fields: [roomId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DirectMessage {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime    @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileName    Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileSize    Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileType    Json?
  /// Could not determine type: the field only had null or empty values in the sample set.
  fileUrl     Json?
  isRead      Boolean
  messageType String
  receiverId  String      @db.ObjectId
  senderId    String      @db.ObjectId
  updatedAt   DateTime    @db.Date

  // Relations
  sender      User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("direct_messages")
}

model ModerationLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  action      String
  reason      String?
  targetId    String   @db.ObjectId
  targetType  String
  moderatorId String   @db.ObjectId
  details     Json?
  createdAt   DateTime @db.Date
  updatedAt   DateTime @db.Date

  // Relations
  moderator   User     @relation("ModerationActions", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@map("moderation_logs")
}

model Notification {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime          @db.Date
  data      NotificationsData?
  isRead    Boolean
  message   String
  title     String
  type      String
  userId    String            @db.ObjectId

  // Relations
  user      User              @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  currency    String
  paymentType String
  status      String
  userId      String   @db.ObjectId
  createdAt   DateTime @db.Date
  updatedAt   DateTime @db.Date
  /// Field referred in an index, but found no data to define the type.
  paystackRef Json?  @unique

  // Relations
  user        User     @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PersonalLivestream {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @db.Date
  description String
  isLive      Boolean
  privacy     String
  startedAt   DateTime  @db.Date
  endedAt     DateTime? @db.Date
  streamerId  String    @db.ObjectId
  title       String
  updatedAt   DateTime  @db.Date
  viewerCount BigInt

  // Relations
  streamer    User      @relation("PersonalLivestreams", fields: [streamerId], references: [id], onDelete: Cascade)

  @@map("personal_livestreams")
}

model RoomMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isActive  Boolean
  joinedAt  DateTime @db.Date
  role      String
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @db.Date
  updatedAt DateTime @db.Date

  // Relations
  room      Room     @relation("RoomMembers", fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation("UserRoomMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@map("room_members")
}

model RoomVideo {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @db.Date
  description  String?
  duration     BigInt
  isForwarded  Boolean?
  privacy      String
  roomId       String   @db.ObjectId
  thumbnailUrl String?
  title        String
  updatedAt    DateTime @db.Date
  uploadedBy   String   @db.ObjectId
  videoUrl     String

  // Relations
  room        Room     @relation("RoomVideos", fields: [roomId], references: [id], onDelete: Cascade)
  uploader    User     @relation("UserUploadedVideos", fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("room_videos")
}

model Room {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  allowFileSharing Boolean
  allowVideo       Boolean
  category         String
  createdAt        DateTime @db.Date
  description      String
  isActive         Boolean
  isPrivate        Boolean?
  lastActivity     DateTime @db.Date
  maxUsers         BigInt
  name             String
  ownerId          String   @db.ObjectId
  privacy          String
  requireApproval  Boolean
  roomId           String   @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  tags             Json?
  updatedAt        DateTime @db.Date

  // Relations
  owner            User         @relation("UserOwnedRooms", fields: [ownerId], references: [id], onDelete: Cascade)
  members          RoomMember[] @relation("RoomMembers")
  videos           RoomVideo[]  @relation("RoomVideos")
  messages         Message[]    @relation("RoomMessages")

  @@map("rooms")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  coins        BigInt
  createdAt    DateTime @db.Date
  displayName  String
  email        String   @unique
  isOnline     Boolean
  lastSeen     DateTime @db.Date
  level        BigInt
  passwordHash String
  role         String
  updatedAt    DateTime @db.Date
  username     String   @unique
  vipLifetime  Boolean
  xp           BigInt
  resetToken   String?
  resetTokenExpiry DateTime?

  // Relations
  personalLivestreams PersonalLivestream[] @relation("PersonalLivestreams")
  friendships     Friendship[] @relation("UserFriendships")
  friends         Friendship[] @relation("FriendFriendships")
  sentMessages    DirectMessage[] @relation("SentMessages")
  receivedMessages DirectMessage[] @relation("ReceivedMessages")
  moderationLogs  ModerationLog[] @relation("ModerationActions")
  payments        Payment[] @relation("UserPayments")
  rooms           Room[] @relation("UserOwnedRooms")
  roomMemberships RoomMember[] @relation("UserRoomMemberships")
  uploadedVideos  RoomVideo[] @relation("UserUploadedVideos")
  messages        Message[]    @relation("UserMessages")
  notifications   Notification[] @relation("UserNotifications")

  @@map("users")
}
